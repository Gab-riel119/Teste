import cv2
import numpy as np
import matplotlib.pyplot as plt
import time as time
from scipy.ndimage.filters import gaussian_filter
import skimage
from skimage.transform import rescale
from sklearn.feature_extraction.image import grid_to_graph
from sklearn.cluster import AgglomerativeClustering
from sklearn.utils.fixes import parse_version

image = cv2.imread("13-08-20-9.bmp")
pixel_values = image.reshape((-1, 3))
pixel_values = np.float32(pixel_values)
#print(pixel_values.shape)
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 500, 0.2)
k = 2
_, labels, (centers) = cv2.kmeans(pixel_values, k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)
centers = np.uint8(centers)
labels = labels.flatten()
segmented_image = centers[labels.flatten()]
segmented_image = segmented_image.reshape(image.shape)
masked_image = np.copy(image)
masked_image = masked_image.reshape((-1, 3))
cluster = 0
masked_image[labels == cluster] = [0, 0, 0]
masked_image = masked_image.reshape(image.shape)

#Ward Hierarchical Clustering
# these were introduced in skimage-0.14
if parse_version(skimage.__version__) >= parse_version('0.14'):
    rescale_params = {'anti_aliasing': False, 'multichannel': False}
else:
    rescale_params = {}

# Generate data
orig_coins = masked_image

rescaled_coins = rescale(orig_coins, 0.4, mode="reflect",
                         **rescale_params)
X = np.reshape(rescaled_coins, (-1, 1))
# Define the structure A of the data. Pixels connected to their neighbors.
connectivity = grid_to_graph(*rescaled_coins.shape)

#plt.imshow(rescaled_coins)
#plt.show()

# Compute clustering
print("Compute structured hierarchical clustering...")
st = time.time()
n_clusters = 5  # number of regions
ward = AgglomerativeClustering(n_clusters=n_clusters, linkage='ward',
                               connectivity=connectivity)
ward.fit(X)
label = np.reshape(ward.labels_, rescaled_coins.shape)
print("Elapsed time: ", time.time() - st)
print("Number of pixels: ", label.size)
print("Number of clusters: ", np.unique(label).size)

# #############################################################################
# Plot the results on an image
plt.figure(figsize=(5, 5))
plt.imshow(rescaled_coins, cmap=plt.cm.gray)
for l in range(n_clusters):
    plt.contour(label == l,
                colors=[plt.cm.autumn(l / float(n_clusters)), ])

plt.xticks(())
plt.yticks(())
plt.show()
